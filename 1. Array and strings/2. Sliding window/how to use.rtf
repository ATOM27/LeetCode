{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red38\green38\blue38;
\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c20000\c20000\c20000;
\cssrgb\c96078\c96078\c96078;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww16080\viewh12380\viewkind0
\deftab720
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
There is a very common group of problems involving subarrays that can be solved efficiently with sliding window. Let's talk about how to identify these problems.
\f1\b \
First
\f0\b0 , the problem will either explicitly or implicitly define criteria that make a subarray "valid". There are 2 components regarding what makes a subarray valid:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
A constraint metric. This is some attribute of a subarray. It could be the sum, the number of unique elements, the frequency of a specific element, or any other attribute.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
A numeric restriction on the constraint metric. This is what the constraint metric should be for a subarray to be considered valid.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 \
\pard\pardeftab720\sa320\partightenfactor0

\f1\b \cf2 Second
\f0\b0 , the problem will ask you to find valid subarrays in some way.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa320\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
The most common task you will see is finding the 
\f1\b best
\f0\b0  valid subarray. The problem will define what makes a subarray 
\f1\b better
\f0\b0  than another. For example, a problem might ask you to find the 
\f1\b longest
\f0\b0  valid subarray.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Another common task is finding the number of valid subarrays. We will take a look at this later in the article.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 Whenever a problem description talks about subarrays, you should figure out if sliding window is a good option by analyzing the problem description. If you can find the things mentioned above, then it's a good bet.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb5 function fn(arr):\
    left = 0\
    for (int right = 0; right < arr.length; right++):\
        Do some logic to "add" element at arr[right] to window\
\
        while WINDOW_IS_INVALID:\
            Do some logic to "remove" element at arr[left] from window\
            left++\
\
        Do some logic to update the answer}