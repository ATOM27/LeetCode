{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red72\green72\blue72;\red255\green255\blue255;\red242\green242\blue242;
\red38\green38\blue38;}
{\*\expandedcolortbl;;\cssrgb\c35294\c35294\c35294;\cssrgb\c100000\c100000\c100000;\cssrgb\c96078\c96078\c96078;
\cssrgb\c20000\c20000\c20000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19720\viewh10940\viewkind0
\deftab720
\pard\pardeftab720\sa320\partightenfactor0

\f0\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
There are several ways to implement two pointers. To start, let's look at the following method:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 1. Start the pointers at the edges of the input. Move them towards each other until they meet.\cb1 \
2. \cb4 Move along both inputs simultaneously until all elements have been checked\
\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf5 \cb4 function fn(arr):\
    left = 0\
    right = arr.length - 1\
\
    while left < right:\
        Do some logic here depending on the problem\
        Do some more logic here to decide on one of the following:\
            1. left++\
            2. right--\
            3. Both left++ and right--\
}